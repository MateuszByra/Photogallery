@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
<header class="nav-menu-container">
    <button class="nav-menu-hamburger @HamburgerMenuActiveCssModifier" @onclick="ToggleNavMenu">
        <span class="nav-menu-hamburger__item nav-menu-hamburger__item--first"></span>
        <span class="nav-menu-hamburger__item"></span>
        <span class="nav-menu-hamburger__item nav-menu-hamburger__item--last"></span>
    </button>
    <ul class="nav-menu">
        <li class="nav-menu__item">
            <NavLink href="/#albums" ActiveClass="" class="nav-menu__text">~ Albums ~</NavLink>
        </li>
        <li class="nav-menu__item">
            <NavLink href="/#about" ActiveClass="" class="nav-menu__text">~ About me ~</NavLink>
        </li>
        <li class="nav-menu__item">
            <NavLink href="/#contact" ActiveClass="" class="nav-menu__text">~ Contact ~</NavLink>
        </li>
    </ul>
</header>

@code {
    private bool activateHamburgerMenu = false;

    private string HamburgerMenuActiveCssModifier => activateHamburgerMenu ? "nav-menu-hamburger--active" : null;

    private void ToggleNavMenu()
    {
        activateHamburgerMenu = !activateHamburgerMenu;
    }

    protected override Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += async (sender, args) => await NavigateToElement();
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NavigateToElement();
        }
    }

    private async Task NavigateToElement()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        if (uri.Fragment.Length == 0)
            return;

        var fragment = uri.Fragment.Substring(1);

        if (string.IsNullOrEmpty(fragment))
        {
            return;
        }

        var elementId = fragment.StartsWith("#") ? fragment.Substring(1) : fragment;

        if (string.IsNullOrEmpty(elementId))
        {
            return;
        }

        await JSRuntime.InvokeVoidAsync("ScrollToSection", elementId);
        activateHamburgerMenu = false;
        this.StateHasChanged();
    }
}
